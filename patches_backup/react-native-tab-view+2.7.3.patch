diff --git a/node_modules/react-native-tab-view/lib/module/TabBar.js b/node_modules/react-native-tab-view/lib/module/TabBar.js
index 2ad3a3f..c30875d 100644
--- a/node_modules/react-native-tab-view/lib/module/TabBar.js
+++ b/node_modules/react-native-tab-view/lib/module/TabBar.js
@@ -1,2 +1,329 @@
-import _extends from"@babel/runtime/helpers/extends";import _classCallCheck from"@babel/runtime/helpers/classCallCheck";import _createClass from"@babel/runtime/helpers/createClass";import _possibleConstructorReturn from"@babel/runtime/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime/helpers/getPrototypeOf";import _inherits from"@babel/runtime/helpers/inherits";var _jsxFileName="/Users/satya/Workspace/Projects/react-native-tab-view/src/TabBar.tsx";import*as React from'react';import{StyleSheet,View,I18nManager,Platform}from'react-native';import Animated from'react-native-reanimated';import TabBarItem from'./TabBarItem';import TabBarIndicator from'./TabBarIndicator';import memoize from'./memoize';var TabBar=function(_React$Component){_inherits(TabBar,_React$Component);function TabBar(){var _getPrototypeOf2;var _this;_classCallCheck(this,TabBar);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(TabBar)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={layout:{width:0,height:0}};_this.scrollAmount=new Animated.Value(0);_this.getTabWidth=function(props,state){var layout=state.layout;var navigationState=props.navigationState,tabStyle=props.tabStyle;var flattened=StyleSheet.flatten(tabStyle);if(flattened){switch(typeof flattened.width){case'number':return flattened.width;case'string':if(flattened.width.endsWith('%')){var width=parseFloat(flattened.width);if(Number.isFinite(width)){return layout.width*(width/100);}}}}if(props.scrollEnabled){return layout.width/5*2;}return layout.width/navigationState.routes.length;};_this.getMaxScrollDistance=function(tabBarWidth,layoutWidth){return tabBarWidth-layoutWidth;};_this.normalizeScrollValue=function(props,state,value){var layout=state.layout;var navigationState=props.navigationState;var tabWidth=_this.getTabWidth(props,state);var tabBarWidth=Math.max(tabWidth*navigationState.routes.length,layout.width);var maxDistance=_this.getMaxScrollDistance(tabBarWidth,layout.width);var scrollValue=Math.max(Math.min(value,maxDistance),0);if(Platform.OS==='android'&&I18nManager.isRTL){return maxDistance-scrollValue;}return scrollValue;};_this.getScrollAmount=function(props,state,i){var layout=state.layout;var tabWidth=_this.getTabWidth(props,state);var centerDistance=tabWidth*(i+1/2);var scrollAmount=centerDistance-layout.width/2;return _this.normalizeScrollValue(props,state,scrollAmount);};_this.resetScroll=function(value){if(_this.props.scrollEnabled){_this.scrollView&&_this.scrollView.scrollTo({x:_this.getScrollAmount(_this.props,_this.state,value),animated:true});}};_this.handleLayout=function(e){var _e$nativeEvent$layout=e.nativeEvent.layout,height=_e$nativeEvent$layout.height,width=_e$nativeEvent$layout.width;if(_this.state.layout.width===width&&_this.state.layout.height===height){return;}_this.setState({layout:{height:height,width:width}});};_this.getTranslateX=memoize(function(scrollAmount,maxScrollDistance){return Animated.multiply(Platform.OS==='android'&&I18nManager.isRTL?Animated.sub(maxScrollDistance,scrollAmount):scrollAmount,I18nManager.isRTL?1:-1);});return _this;}_createClass(TabBar,[{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){if(prevProps.navigationState.routes.length!==this.props.navigationState.routes.length||prevProps.navigationState.index!==this.props.navigationState.index||prevState.layout.width!==this.state.layout.width){this.resetScroll(this.props.navigationState.index);}}},{key:"render",value:function render(){var _this2=this;var _this$props=this.props,position=_this$props.position,navigationState=_this$props.navigationState,jumpTo=_this$props.jumpTo,scrollEnabled=_this$props.scrollEnabled,bounces=_this$props.bounces,getAccessibilityLabel=_this$props.getAccessibilityLabel,getAccessible=_this$props.getAccessible,getLabelText=_this$props.getLabelText,getTestID=_this$props.getTestID,renderBadge=_this$props.renderBadge,renderIcon=_this$props.renderIcon,renderLabel=_this$props.renderLabel,activeColor=_this$props.activeColor,inactiveColor=_this$props.inactiveColor,pressColor=_this$props.pressColor,pressOpacity=_this$props.pressOpacity,onTabPress=_this$props.onTabPress,onTabLongPress=_this$props.onTabLongPress,tabStyle=_this$props.tabStyle,labelStyle=_this$props.labelStyle,indicatorStyle=_this$props.indicatorStyle,contentContainerStyle=_this$props.contentContainerStyle,style=_this$props.style;var layout=this.state.layout;var routes=navigationState.routes;var tabWidth=this.getTabWidth(this.props,this.state);var tabBarWidth=tabWidth*routes.length;var tabBarWidthPercent=routes.length*40+"%";var translateX=this.getTranslateX(this.scrollAmount,this.getMaxScrollDistance(tabBarWidth,layout.width));return React.createElement(Animated.View,{onLayout:this.handleLayout,style:[styles.tabBar,style],__source:{fileName:_jsxFileName,lineNumber:241}},React.createElement(Animated.View,{pointerEvents:"none",style:[styles.indicatorContainer,scrollEnabled?{transform:[{translateX:translateX}]}:null,tabBarWidth?{width:tabBarWidth}:scrollEnabled?{width:tabBarWidthPercent}:null],__source:{fileName:_jsxFileName,lineNumber:245}},this.props.renderIndicator({position:position,layout:layout,navigationState:navigationState,jumpTo:jumpTo,width:tabWidth,style:indicatorStyle})),React.createElement(View,{style:styles.scroll,__source:{fileName:_jsxFileName,lineNumber:266}},React.createElement(Animated.ScrollView,{horizontal:true,keyboardShouldPersistTaps:"handled",scrollEnabled:scrollEnabled,bounces:bounces,alwaysBounceHorizontal:false,scrollsToTop:false,showsHorizontalScrollIndicator:false,automaticallyAdjustContentInsets:false,overScrollMode:"never",contentContainerStyle:[styles.tabContent,scrollEnabled?{width:tabBarWidth||tabBarWidthPercent}:styles.container,contentContainerStyle],scrollEventThrottle:16,onScroll:Animated.event([{nativeEvent:{contentOffset:{x:this.scrollAmount}}}],{useNativeDriver:true}),ref:function ref(el){_this2.scrollView=el&&el.getNode();},__source:{fileName:_jsxFileName,lineNumber:267}},routes.map(function(route){return React.createElement(TabBarItem,{key:route.key,position:position,route:route,navigationState:navigationState,getAccessibilityLabel:getAccessibilityLabel,getAccessible:getAccessible,getLabelText:getLabelText,getTestID:getTestID,renderBadge:renderBadge,renderIcon:renderIcon,renderLabel:renderLabel,activeColor:activeColor,inactiveColor:inactiveColor,pressColor:pressColor,pressOpacity:pressOpacity,onPress:function onPress(){onTabPress&&onTabPress({route:route});_this2.props.jumpTo(route.key);},onLongPress:function onLongPress(){return onTabLongPress&&onTabLongPress({route:route});},labelStyle:labelStyle,style:tabStyle,__source:{fileName:_jsxFileName,lineNumber:301}});}))));}}]);return TabBar;}(React.Component);TabBar.defaultProps={getLabelText:function getLabelText(_ref){var route=_ref.route;return typeof route.title==='string'?route.title.toUpperCase():route.title;},getAccessible:function getAccessible(_ref2){var route=_ref2.route;return typeof route.accessible!=='undefined'?route.accessible:true;},getAccessibilityLabel:function getAccessibilityLabel(_ref3){var route=_ref3.route;return typeof route.accessibilityLabel==='string'?route.accessibilityLabel:typeof route.title==='string'?route.title:undefined;},getTestID:function getTestID(_ref4){var route=_ref4.route;return route.testID;},renderIndicator:function renderIndicator(props){return React.createElement(TabBarIndicator,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:81}}));}};export{TabBar as default};var styles=StyleSheet.create({container:{flex:1},scroll:{overflow:'scroll'},tabBar:{backgroundColor:'#2196f3',elevation:4,shadowColor:'black',shadowOpacity:0.1,shadowRadius:StyleSheet.hairlineWidth,shadowOffset:{height:StyleSheet.hairlineWidth,width:0},zIndex:1},tabContent:{flexDirection:'row',flexWrap:'nowrap'},indicatorContainer:{position:'absolute',top:0,left:0,right:0,bottom:0}});
+import _extends from "@babel/runtime/helpers/extends";
+import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
+import _createClass from "@babel/runtime/helpers/createClass";
+import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
+import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
+import _inherits from "@babel/runtime/helpers/inherits";
+var _jsxFileName =
+  "/Users/satya/Workspace/Projects/react-native-tab-view/src/TabBar.tsx";
+import * as React from "react";
+import { StyleSheet, View, I18nManager, Platform } from "react-native";
+import Animated from "react-native-reanimated";
+import TabBarItem from "./TabBarItem";
+import TabBarIndicator from "./TabBarIndicator";
+import memoize from "./memoize";
+var TabBar = (function (_React$Component) {
+  _inherits(TabBar, _React$Component);
+  function TabBar() {
+    var _getPrototypeOf2;
+    var _this;
+    _classCallCheck(this, TabBar);
+    for (
+      var _len = arguments.length, args = new Array(_len), _key = 0;
+      _key < _len;
+      _key++
+    ) {
+      args[_key] = arguments[_key];
+    }
+    _this = _possibleConstructorReturn(
+      this,
+      (_getPrototypeOf2 = _getPrototypeOf(TabBar)).call.apply(
+        _getPrototypeOf2,
+        [this].concat(args)
+      )
+    );
+    _this.state = { layout: { width: 0, height: 0 } };
+    _this.scrollAmount = new Animated.Value(0);
+    _this.getTabWidth = function (props, state) {
+      var layout = state.layout;
+      var navigationState = props.navigationState,
+        tabStyle = props.tabStyle;
+      var flattened = StyleSheet.flatten(tabStyle);
+      if (flattened) {
+        switch (typeof flattened.width) {
+          case "number":
+            return flattened.width;
+          case "string":
+            if (flattened.width.endsWith("%")) {
+              var width = parseFloat(flattened.width);
+              if (Number.isFinite(width)) {
+                return layout.width * (width / 100);
+              }
+            }
+        }
+      }
+      if (props.scrollEnabled) {
+        return (layout.width / 5) * 2;
+      }
+      return layout.width / navigationState.routes.length;
+    };
+    _this.getMaxScrollDistance = function (tabBarWidth, layoutWidth) {
+      return tabBarWidth - layoutWidth;
+    };
+    _this.normalizeScrollValue = function (props, state, value) {
+      var layout = state.layout;
+      var navigationState = props.navigationState;
+      var tabWidth = _this.getTabWidth(props, state);
+      var tabBarWidth = Math.max(
+        tabWidth * navigationState.routes.length,
+        layout.width
+      );
+      var maxDistance = _this.getMaxScrollDistance(tabBarWidth, layout.width);
+      var scrollValue = Math.max(Math.min(value, maxDistance), 0);
+      if (Platform.OS === "android" && I18nManager.isRTL) {
+        return maxDistance - scrollValue;
+      }
+      return scrollValue;
+    };
+    _this.getScrollAmount = function (props, state, i) {
+      var layout = state.layout;
+      var tabWidth = _this.getTabWidth(props, state);
+      var centerDistance = tabWidth * (i + 1 / 2);
+      var scrollAmount = centerDistance - layout.width / 2;
+      return _this.normalizeScrollValue(props, state, scrollAmount);
+    };
+    _this.resetScroll = function (value) {
+      if (_this.props.scrollEnabled) {
+        _this.scrollView &&
+          _this.scrollView.scrollTo({
+            x: _this.getScrollAmount(_this.props, _this.state, value),
+            animated: true,
+          });
+      }
+    };
+    _this.handleLayout = function (e) {
+      var _e$nativeEvent$layout = e.nativeEvent.layout,
+        height = _e$nativeEvent$layout.height,
+        width = _e$nativeEvent$layout.width;
+      if (
+        _this.state.layout.width === width &&
+        _this.state.layout.height === height
+      ) {
+        return;
+      }
+      _this.setState({ layout: { height: height, width: width } });
+    };
+    _this.getTranslateX = memoize(function (scrollAmount, maxScrollDistance) {
+      return Animated.multiply(
+        Platform.OS === "android" && I18nManager.isRTL
+          ? Animated.sub(maxScrollDistance, scrollAmount)
+          : scrollAmount,
+        I18nManager.isRTL ? 1 : -1
+      );
+    });
+    return _this;
+  }
+  _createClass(TabBar, [
+    {
+      key: "componentDidUpdate",
+      value: function componentDidUpdate(prevProps, prevState) {
+        if (
+          prevProps.navigationState.routes.length !==
+            this.props.navigationState.routes.length ||
+          prevProps.navigationState.index !==
+            this.props.navigationState.index ||
+          prevState.layout.width !== this.state.layout.width
+        ) {
+          this.resetScroll(this.props.navigationState.index);
+        }
+      },
+    },
+    {
+      key: "render",
+      value: function render() {
+        var _this2 = this;
+        var _this$props = this.props,
+          position = _this$props.position,
+          navigationState = _this$props.navigationState,
+          jumpTo = _this$props.jumpTo,
+          scrollEnabled = _this$props.scrollEnabled,
+          bounces = _this$props.bounces,
+          getAccessibilityLabel = _this$props.getAccessibilityLabel,
+          getAccessible = _this$props.getAccessible,
+          getLabelText = _this$props.getLabelText,
+          getTestID = _this$props.getTestID,
+          renderBadge = _this$props.renderBadge,
+          renderIcon = _this$props.renderIcon,
+          renderLabel = _this$props.renderLabel,
+          activeColor = _this$props.activeColor,
+          inactiveColor = _this$props.inactiveColor,
+          pressColor = _this$props.pressColor,
+          pressOpacity = _this$props.pressOpacity,
+          onTabPress = _this$props.onTabPress,
+          onTabLongPress = _this$props.onTabLongPress,
+          tabStyle = _this$props.tabStyle,
+          labelStyle = _this$props.labelStyle,
+          indicatorStyle = _this$props.indicatorStyle,
+          contentContainerStyle = _this$props.contentContainerStyle,
+          style = _this$props.style;
+        var layout = this.state.layout;
+        var routes = navigationState.routes;
+        var tabWidth = this.getTabWidth(this.props, this.state);
+        var tabBarWidth = tabWidth * routes.length;
+        var tabBarWidthPercent = routes.length * 40 + "%";
+        var translateX = this.getTranslateX(
+          this.scrollAmount,
+          this.getMaxScrollDistance(tabBarWidth, layout.width)
+        );
+        return React.createElement(
+          Animated.View,
+          {
+            onLayout: this.handleLayout,
+            style: [styles.tabBar, style],
+            __source: { fileName: _jsxFileName, lineNumber: 241 },
+          },
+          React.createElement(
+            Animated.View,
+            {
+              pointerEvents: "none",
+              style: [
+                styles.indicatorContainer,
+                scrollEnabled
+                  ? { transform: [{ translateX: translateX }] }
+                  : null,
+                tabBarWidth
+                  ? { width: tabBarWidth }
+                  : scrollEnabled
+                  ? { width: tabBarWidthPercent }
+                  : null,
+              ],
+              __source: { fileName: _jsxFileName, lineNumber: 245 },
+            },
+            this.props.renderIndicator({
+              position: position,
+              layout: layout,
+              navigationState: navigationState,
+              jumpTo: jumpTo,
+              width: tabWidth,
+              style: indicatorStyle,
+            })
+          ),
+          React.createElement(
+            View,
+            {
+              style: styles.scroll,
+              __source: { fileName: _jsxFileName, lineNumber: 266 },
+            },
+            React.createElement(
+              Animated.ScrollView,
+              {
+                horizontal: true,
+                keyboardShouldPersistTaps: "handled",
+                scrollEnabled: scrollEnabled,
+                bounces: bounces,
+                alwaysBounceHorizontal: false,
+                scrollsToTop: false,
+                showsHorizontalScrollIndicator: false,
+                automaticallyAdjustContentInsets: false,
+                overScrollMode: "never",
+                contentContainerStyle: [
+                  styles.tabContent,
+                  scrollEnabled
+                    ? { width: tabBarWidth || tabBarWidthPercent }
+                    : styles.container,
+                  contentContainerStyle,
+                ],
+                scrollEventThrottle: 16,
+                onScroll: Animated.event(
+                  [
+                    {
+                      nativeEvent: { contentOffset: { x: this.scrollAmount } },
+                    },
+                  ],
+                  { useNativeDriver: true }
+                ),
+                ref: function ref(el) {
+                  _this2.scrollView = el;
+                },
+                __source: { fileName: _jsxFileName, lineNumber: 267 },
+              },
+              routes.map(function (route) {
+                return React.createElement(TabBarItem, {
+                  key: route.key,
+                  position: position,
+                  route: route,
+                  navigationState: navigationState,
+                  getAccessibilityLabel: getAccessibilityLabel,
+                  getAccessible: getAccessible,
+                  getLabelText: getLabelText,
+                  getTestID: getTestID,
+                  renderBadge: renderBadge,
+                  renderIcon: renderIcon,
+                  renderLabel: renderLabel,
+                  activeColor: activeColor,
+                  inactiveColor: inactiveColor,
+                  pressColor: pressColor,
+                  pressOpacity: pressOpacity,
+                  onPress: function onPress() {
+                    onTabPress && onTabPress({ route: route });
+                    _this2.props.jumpTo(route.key);
+                  },
+                  onLongPress: function onLongPress() {
+                    return onTabLongPress && onTabLongPress({ route: route });
+                  },
+                  labelStyle: labelStyle,
+                  style: tabStyle,
+                  __source: { fileName: _jsxFileName, lineNumber: 301 },
+                });
+              })
+            )
+          )
+        );
+      },
+    },
+  ]);
+  return TabBar;
+})(React.Component);
+TabBar.defaultProps = {
+  getLabelText: function getLabelText(_ref) {
+    var route = _ref.route;
+    return typeof route.title === "string" ? route.title : route.title;
+  },
+  getAccessible: function getAccessible(_ref2) {
+    var route = _ref2.route;
+    return typeof route.accessible !== "undefined" ? route.accessible : true;
+  },
+  getAccessibilityLabel: function getAccessibilityLabel(_ref3) {
+    var route = _ref3.route;
+    return typeof route.accessibilityLabel === "string"
+      ? route.accessibilityLabel
+      : typeof route.title === "string"
+      ? route.title
+      : undefined;
+  },
+  getTestID: function getTestID(_ref4) {
+    var route = _ref4.route;
+    return route.testID;
+  },
+  renderIndicator: function renderIndicator(props) {
+    return React.createElement(
+      TabBarIndicator,
+      _extends({}, props, {
+        __source: { fileName: _jsxFileName, lineNumber: 81 },
+      })
+    );
+  },
+};
+export { TabBar as default };
+var styles = StyleSheet.create({
+  container: { flex: 1 },
+  scroll: { overflow: "scroll" },
+  tabBar: {
+    backgroundColor: "#2196f3",
+    elevation: 4,
+    shadowColor: "black",
+    shadowOpacity: 0.1,
+    shadowRadius: StyleSheet.hairlineWidth,
+    shadowOffset: { height: StyleSheet.hairlineWidth, width: 0 },
+    zIndex: 1,
+  },
+  tabContent: { flexDirection: "row", flexWrap: "nowrap" },
+  indicatorContainer: {
+    position: "absolute",
+    top: 0,
+    left: 0,
+    right: 0,
+    bottom: 0,
+  },
+});
 //# sourceMappingURL=TabBar.js.map
diff --git a/node_modules/react-native-tab-view/lib/module/TabBarItem.js b/node_modules/react-native-tab-view/lib/module/TabBarItem.js
index 2d23c2f..dd7b8ae 100644
--- a/node_modules/react-native-tab-view/lib/module/TabBarItem.js
+++ b/node_modules/react-native-tab-view/lib/module/TabBarItem.js
@@ -1,2 +1,273 @@
-import _classCallCheck from"@babel/runtime/helpers/classCallCheck";import _createClass from"@babel/runtime/helpers/createClass";import _possibleConstructorReturn from"@babel/runtime/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime/helpers/getPrototypeOf";import _inherits from"@babel/runtime/helpers/inherits";var _jsxFileName="/Users/satya/Workspace/Projects/react-native-tab-view/src/TabBarItem.tsx";import*as React from'react';import{StyleSheet,View}from'react-native';import TouchableItem from'./TouchableItem';import Animated from'react-native-reanimated';import memoize from'./memoize';var DEFAULT_ACTIVE_COLOR='rgba(255, 255, 255, 1)';var DEFAULT_INACTIVE_COLOR='rgba(255, 255, 255, 0.7)';var TabBarItem=function(_React$Component){_inherits(TabBarItem,_React$Component);function TabBarItem(){var _getPrototypeOf2;var _this;_classCallCheck(this,TabBarItem);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(TabBarItem)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.getActiveOpacity=memoize(function(position,routes,tabIndex){if(routes.length>1){var inputRange=routes.map(function(_,i){return i;});return Animated.interpolate(position,{inputRange:inputRange,outputRange:inputRange.map(function(i){return i===tabIndex?1:0;})});}else{return 1;}});_this.getInactiveOpacity=memoize(function(position,routes,tabIndex){if(routes.length>1){var inputRange=routes.map(function(_,i){return i;});return Animated.interpolate(position,{inputRange:inputRange,outputRange:inputRange.map(function(i){return i===tabIndex?0:1;})});}else{return 0;}});return _this;}_createClass(TabBarItem,[{key:"render",value:function render(){var _this$props=this.props,route=_this$props.route,position=_this$props.position,navigationState=_this$props.navigationState,renderLabelPassed=_this$props.renderLabel,renderIcon=_this$props.renderIcon,renderBadge=_this$props.renderBadge,getLabelText=_this$props.getLabelText,getTestID=_this$props.getTestID,getAccessibilityLabel=_this$props.getAccessibilityLabel,getAccessible=_this$props.getAccessible,_this$props$activeCol=_this$props.activeColor,activeColor=_this$props$activeCol===void 0?DEFAULT_ACTIVE_COLOR:_this$props$activeCol,_this$props$inactiveC=_this$props.inactiveColor,inactiveColor=_this$props$inactiveC===void 0?DEFAULT_INACTIVE_COLOR:_this$props$inactiveC,pressColor=_this$props.pressColor,pressOpacity=_this$props.pressOpacity,labelStyle=_this$props.labelStyle,style=_this$props.style,onPress=_this$props.onPress,onLongPress=_this$props.onLongPress;var tabIndex=navigationState.routes.indexOf(route);var isFocused=navigationState.index===tabIndex;var activeOpacity=this.getActiveOpacity(position,navigationState.routes,tabIndex);var inactiveOpacity=this.getInactiveOpacity(position,navigationState.routes,tabIndex);var icon=null;var label=null;if(renderIcon){var activeIcon=renderIcon({route:route,focused:true,color:activeColor});var inactiveIcon=renderIcon({route:route,focused:false,color:inactiveColor});if(inactiveIcon!=null&&activeIcon!=null){icon=React.createElement(View,{style:styles.icon,__source:{fileName:_jsxFileName,lineNumber:130}},React.createElement(Animated.View,{style:{opacity:inactiveOpacity},__source:{fileName:_jsxFileName,lineNumber:131}},inactiveIcon),React.createElement(Animated.View,{style:[StyleSheet.absoluteFill,{opacity:activeOpacity}],__source:{fileName:_jsxFileName,lineNumber:134}},activeIcon));}}var renderLabel=renderLabelPassed!==undefined?renderLabelPassed:function(_ref){var route=_ref.route,color=_ref.color;var labelText=getLabelText({route:route});if(typeof labelText==='string'){return React.createElement(Animated.Text,{style:[styles.label,icon?{marginTop:0}:null,{color:color},labelStyle],__source:{fileName:_jsxFileName,lineNumber:152}},labelText);}return labelText;};if(renderLabel){var activeLabel=renderLabel({route:route,focused:true,color:activeColor});var inactiveLabel=renderLabel({route:route,focused:false,color:inactiveColor});label=React.createElement(View,{__source:{fileName:_jsxFileName,lineNumber:182}},React.createElement(Animated.View,{style:{opacity:inactiveOpacity},__source:{fileName:_jsxFileName,lineNumber:183}},inactiveLabel),React.createElement(Animated.View,{style:[StyleSheet.absoluteFill,{opacity:activeOpacity}],__source:{fileName:_jsxFileName,lineNumber:186}},activeLabel));}var tabStyle=StyleSheet.flatten(style);var isWidthSet=tabStyle&&tabStyle.width!==undefined;var tabContainerStyle=isWidthSet?null:{flex:1};var scene={route:route};var accessibilityLabel=getAccessibilityLabel(scene);accessibilityLabel=typeof accessibilityLabel!=='undefined'?accessibilityLabel:getLabelText(scene);var badge=renderBadge?renderBadge(scene):null;return React.createElement(TouchableItem,{borderless:true,testID:getTestID(scene),accessible:getAccessible(scene),accessibilityLabel:accessibilityLabel,accessibilityTraits:isFocused?['button','selected']:'button',accessibilityComponentType:"button",accessibilityRole:"button",accessibilityStates:isFocused?['selected']:[],pressColor:pressColor,pressOpacity:pressOpacity,delayPressIn:0,onPress:onPress,onLongPress:onLongPress,style:tabContainerStyle,__source:{fileName:_jsxFileName,lineNumber:211}},React.createElement(View,{pointerEvents:"none",style:[styles.item,tabStyle],__source:{fileName:_jsxFileName,lineNumber:227}},icon,label,badge!=null?React.createElement(View,{style:styles.badge,__source:{fileName:_jsxFileName,lineNumber:230}},badge):null));}}]);return TabBarItem;}(React.Component);export{TabBarItem as default};var styles=StyleSheet.create({label:{margin:4,backgroundColor:'transparent'},icon:{margin:2},item:{flex:1,alignItems:'center',justifyContent:'center',padding:10,minHeight:48},badge:{position:'absolute',top:0,right:0}});
+import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
+import _createClass from "@babel/runtime/helpers/createClass";
+import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
+import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
+import _inherits from "@babel/runtime/helpers/inherits";
+var _jsxFileName =
+  "/Users/satya/Workspace/Projects/react-native-tab-view/src/TabBarItem.tsx";
+import * as React from "react";
+import { StyleSheet, View } from "react-native";
+import TouchableItem from "./TouchableItem";
+import Animated from "react-native-reanimated";
+import memoize from "./memoize";
+var DEFAULT_ACTIVE_COLOR = "rgba(255, 255, 255, 1)";
+var DEFAULT_INACTIVE_COLOR = "rgba(255, 255, 255, 0.7)";
+var TabBarItem = (function (_React$Component) {
+  _inherits(TabBarItem, _React$Component);
+  function TabBarItem() {
+    var _getPrototypeOf2;
+    var _this;
+    _classCallCheck(this, TabBarItem);
+    for (
+      var _len = arguments.length, args = new Array(_len), _key = 0;
+      _key < _len;
+      _key++
+    ) {
+      args[_key] = arguments[_key];
+    }
+    _this = _possibleConstructorReturn(
+      this,
+      (_getPrototypeOf2 = _getPrototypeOf(TabBarItem)).call.apply(
+        _getPrototypeOf2,
+        [this].concat(args)
+      )
+    );
+    _this.getActiveOpacity = memoize(function (position, routes, tabIndex) {
+      if (routes.length > 1) {
+        var inputRange = routes.map(function (_, i) {
+          return i;
+        });
+        return Animated.interpolateNode(position, {
+          inputRange: inputRange,
+          outputRange: inputRange.map(function (i) {
+            return i === tabIndex ? 1 : 0;
+          }),
+        });
+      } else {
+        return 1;
+      }
+    });
+    _this.getInactiveOpacity = memoize(function (position, routes, tabIndex) {
+      if (routes.length > 1) {
+        var inputRange = routes.map(function (_, i) {
+          return i;
+        });
+        return Animated.interpolateNode(position, {
+          inputRange: inputRange,
+          outputRange: inputRange.map(function (i) {
+            return i === tabIndex ? 0 : 1;
+          }),
+        });
+      } else {
+        return 0;
+      }
+    });
+    return _this;
+  }
+  _createClass(TabBarItem, [
+    {
+      key: "render",
+      value: function render() {
+        var _this$props = this.props,
+          route = _this$props.route,
+          position = _this$props.position,
+          navigationState = _this$props.navigationState,
+          renderLabelPassed = _this$props.renderLabel,
+          renderIcon = _this$props.renderIcon,
+          renderBadge = _this$props.renderBadge,
+          getLabelText = _this$props.getLabelText,
+          getTestID = _this$props.getTestID,
+          getAccessibilityLabel = _this$props.getAccessibilityLabel,
+          getAccessible = _this$props.getAccessible,
+          _this$props$activeCol = _this$props.activeColor,
+          activeColor =
+            _this$props$activeCol === void 0
+              ? DEFAULT_ACTIVE_COLOR
+              : _this$props$activeCol,
+          _this$props$inactiveC = _this$props.inactiveColor,
+          inactiveColor =
+            _this$props$inactiveC === void 0
+              ? DEFAULT_INACTIVE_COLOR
+              : _this$props$inactiveC,
+          pressColor = _this$props.pressColor,
+          pressOpacity = _this$props.pressOpacity,
+          labelStyle = _this$props.labelStyle,
+          style = _this$props.style,
+          onPress = _this$props.onPress,
+          onLongPress = _this$props.onLongPress;
+        var tabIndex = navigationState.routes.indexOf(route);
+        var isFocused = navigationState.index === tabIndex;
+        var activeOpacity = this.getActiveOpacity(
+          position,
+          navigationState.routes,
+          tabIndex
+        );
+        var inactiveOpacity = this.getInactiveOpacity(
+          position,
+          navigationState.routes,
+          tabIndex
+        );
+        var icon = null;
+        var label = null;
+        if (renderIcon) {
+          var activeIcon = renderIcon({
+            route: route,
+            focused: true,
+            color: activeColor,
+          });
+          var inactiveIcon = renderIcon({
+            route: route,
+            focused: false,
+            color: inactiveColor,
+          });
+          if (inactiveIcon != null && activeIcon != null) {
+            icon = React.createElement(
+              View,
+              {
+                style: styles.icon,
+                __source: { fileName: _jsxFileName, lineNumber: 130 },
+              },
+              React.createElement(
+                Animated.View,
+                {
+                  style: { opacity: inactiveOpacity },
+                  __source: { fileName: _jsxFileName, lineNumber: 131 },
+                },
+                inactiveIcon
+              ),
+              React.createElement(
+                Animated.View,
+                {
+                  style: [StyleSheet.absoluteFill, { opacity: activeOpacity }],
+                  __source: { fileName: _jsxFileName, lineNumber: 134 },
+                },
+                activeIcon
+              )
+            );
+          }
+        }
+        var renderLabel =
+          renderLabelPassed !== undefined
+            ? renderLabelPassed
+            : function (_ref) {
+                var route = _ref.route,
+                  color = _ref.color;
+                var labelText = getLabelText({ route: route });
+                if (typeof labelText === "string") {
+                  return React.createElement(
+                    Animated.Text,
+                    {
+                      style: [
+                        styles.label,
+                        icon ? { marginTop: 0 } : null,
+                        { color: color },
+                        labelStyle,
+                      ],
+                      __source: { fileName: _jsxFileName, lineNumber: 152 },
+                    },
+                    labelText
+                  );
+                }
+                return labelText;
+              };
+        if (renderLabel) {
+          var activeLabel = renderLabel({
+            route: route,
+            focused: true,
+            color: activeColor,
+          });
+          var inactiveLabel = renderLabel({
+            route: route,
+            focused: false,
+            color: inactiveColor,
+          });
+          label = React.createElement(
+            View,
+            { __source: { fileName: _jsxFileName, lineNumber: 182 } },
+            React.createElement(
+              Animated.View,
+              {
+                style: { opacity: inactiveOpacity },
+                __source: { fileName: _jsxFileName, lineNumber: 183 },
+              },
+              inactiveLabel
+            ),
+            React.createElement(
+              Animated.View,
+              {
+                style: [StyleSheet.absoluteFill, { opacity: activeOpacity }],
+                __source: { fileName: _jsxFileName, lineNumber: 186 },
+              },
+              activeLabel
+            )
+          );
+        }
+        var tabStyle = StyleSheet.flatten(style);
+        var isWidthSet = tabStyle && tabStyle.width !== undefined;
+        var tabContainerStyle = isWidthSet ? null : { flex: 1 };
+        var scene = { route: route };
+        var accessibilityLabel = getAccessibilityLabel(scene);
+        accessibilityLabel =
+          typeof accessibilityLabel !== "undefined"
+            ? accessibilityLabel
+            : getLabelText(scene);
+        var badge = renderBadge ? renderBadge(scene) : null;
+        return React.createElement(
+          TouchableItem,
+          {
+            borderless: true,
+            testID: getTestID(scene),
+            accessible: getAccessible(scene),
+            accessibilityLabel: accessibilityLabel,
+            accessibilityTraits: isFocused ? ["button", "selected"] : "button",
+            accessibilityComponentType: "button",
+            accessibilityRole: "button",
+            accessibilityStates: isFocused ? ["selected"] : [],
+            pressColor: pressColor,
+            pressOpacity: pressOpacity,
+            delayPressIn: 0,
+            onPress: onPress,
+            onLongPress: onLongPress,
+            style: tabContainerStyle,
+            __source: { fileName: _jsxFileName, lineNumber: 211 },
+          },
+          React.createElement(
+            View,
+            {
+              pointerEvents: "none",
+              style: [styles.item, tabStyle],
+              __source: { fileName: _jsxFileName, lineNumber: 227 },
+            },
+            icon,
+            label,
+            badge != null
+              ? React.createElement(
+                  View,
+                  {
+                    style: styles.badge,
+                    __source: { fileName: _jsxFileName, lineNumber: 230 },
+                  },
+                  badge
+                )
+              : null
+          )
+        );
+      },
+    },
+  ]);
+  return TabBarItem;
+})(React.Component);
+export { TabBarItem as default };
+var styles = StyleSheet.create({
+  label: { margin: 4, backgroundColor: "transparent" },
+  icon: { margin: 2 },
+  item: {
+    flex: 1,
+    alignItems: "center",
+    justifyContent: "center",
+    padding: 10,
+    minHeight: 48,
+  },
+  badge: { position: "absolute", top: 0, right: 0 },
+});
 //# sourceMappingURL=TabBarItem.js.map
diff --git a/node_modules/react-native-tab-view/lib/module/TouchableItem.js b/node_modules/react-native-tab-view/lib/module/TouchableItem.js
index 39d2259..ea7bd23 100644
--- a/node_modules/react-native-tab-view/lib/module/TouchableItem.js
+++ b/node_modules/react-native-tab-view/lib/module/TouchableItem.js
@@ -1,2 +1,2 @@
-import _extends from"@babel/runtime/helpers/extends";import _objectWithoutProperties from"@babel/runtime/helpers/objectWithoutProperties";import _classCallCheck from"@babel/runtime/helpers/classCallCheck";import _createClass from"@babel/runtime/helpers/createClass";import _possibleConstructorReturn from"@babel/runtime/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime/helpers/getPrototypeOf";import _inherits from"@babel/runtime/helpers/inherits";var _jsxFileName="/Users/satya/Workspace/Projects/react-native-tab-view/src/TouchableItem.tsx";import*as React from'react';import{TouchableNativeFeedback,TouchableOpacity,Platform,View}from'react-native';var LOLLIPOP=21;var TouchableItem=function(_React$Component){_inherits(TouchableItem,_React$Component);function TouchableItem(){_classCallCheck(this,TouchableItem);return _possibleConstructorReturn(this,_getPrototypeOf(TouchableItem).apply(this,arguments));}_createClass(TouchableItem,[{key:"render",value:function render(){var _this$props=this.props,style=_this$props.style,pressOpacity=_this$props.pressOpacity,pressColor=_this$props.pressColor,borderless=_this$props.borderless,children=_this$props.children,rest=_objectWithoutProperties(_this$props,["style","pressOpacity","pressColor","borderless","children"]);if(Platform.OS==='android'&&Platform.Version>=LOLLIPOP){return React.createElement(TouchableNativeFeedback,_extends({},rest,{background:TouchableNativeFeedback.Ripple(pressColor,borderless),__source:{fileName:_jsxFileName,lineNumber:42}}),React.createElement(View,{style:style,__source:{fileName:_jsxFileName,lineNumber:46}},React.Children.only(children)));}else{return React.createElement(TouchableOpacity,_extends({},rest,{style:style,activeOpacity:pressOpacity,__source:{fileName:_jsxFileName,lineNumber:51}}),children);}}}]);return TouchableItem;}(React.Component);TouchableItem.defaultProps={pressColor:'rgba(255, 255, 255, .4)'};export{TouchableItem as default};
+import _extends from"@babel/runtime/helpers/extends";import _objectWithoutProperties from"@babel/runtime/helpers/objectWithoutProperties";import _classCallCheck from"@babel/runtime/helpers/classCallCheck";import _createClass from"@babel/runtime/helpers/createClass";import _possibleConstructorReturn from"@babel/runtime/helpers/possibleConstructorReturn";import _getPrototypeOf from"@babel/runtime/helpers/getPrototypeOf";import _inherits from"@babel/runtime/helpers/inherits";var _jsxFileName="/Users/satya/Workspace/Projects/react-native-tab-view/src/TouchableItem.tsx";import * as React from'react';import{TouchableNativeFeedback,TouchableOpacity,Platform,View}from'react-native';var LOLLIPOP=21;var TouchableItem=function(_React$Component){_inherits(TouchableItem,_React$Component);function TouchableItem(){_classCallCheck(this,TouchableItem);return _possibleConstructorReturn(this,_getPrototypeOf(TouchableItem).apply(this,arguments));}_createClass(TouchableItem,[{key:"render",value:function render(){var _this$props=this.props,style=_this$props.style,pressOpacity=_this$props.pressOpacity,pressColor=_this$props.pressColor,borderless=_this$props.borderless,children=_this$props.children,rest=_objectWithoutProperties(_this$props,["style","pressOpacity","pressColor","borderless","children"]);if(Platform.OS==='android'&&Platform.Version>=LOLLIPOP){return React.createElement(TouchableNativeFeedback,_extends({},rest,{background:TouchableNativeFeedback.Ripple(pressColor,borderless),__source:{fileName:_jsxFileName,lineNumber:42}}),React.createElement(View,{style:style,__source:{fileName:_jsxFileName,lineNumber:46}},React.Children.only(children)));}else{return React.createElement(TouchableOpacity,_extends({},rest,{style:style,activeOpacity:pressOpacity,__source:{fileName:_jsxFileName,lineNumber:51}}),children);}}}]);return TouchableItem;}(React.Component);TouchableItem.defaultProps={pressColor:'rgba(255, 255, 255, .4)'};export{TouchableItem as default};
 //# sourceMappingURL=TouchableItem.js.map
\ No newline at end of file
