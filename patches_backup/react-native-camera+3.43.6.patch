diff --git a/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.h b/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.h
index 5412181..4cffd75 100644
--- a/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.h
+++ b/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.h
@@ -1,7 +1,8 @@
 
 #import <UIKit/UIKit.h>
-#if __has_include(<FirebaseMLVision/FirebaseMLVision.h>)
-  #import <FirebaseMLVision/FirebaseMLVision.h>
+#if __has_include(<MLKitBarcodeScanning/MLKitBarcodeScanning.h>)
+  #import <MLKitVision/MLKitVision.h>
+  #import <MLKitBarcodeScanning/MLKitBarcodeScanning.h>
 #endif
 
 @interface BarcodeDetectorManagerMlkit : NSObject
diff --git a/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.m b/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.m
index 3b41d17..d56fda5 100644
--- a/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.m
+++ b/node_modules/react-native-camera/ios/RN/BarcodeDetectorManagerMlkit.m
@@ -1,12 +1,12 @@
 #import "BarcodeDetectorManagerMlkit.h"
 #import <React/RCTConvert.h>
 #import "RNFileSystem.h"
-#if __has_include(<FirebaseMLVision/FirebaseMLVision.h>)
+#if __has_include(<MLKitBarcodeScanning/MLKitBarcodeScanning.h>)
 
 @interface BarcodeDetectorManagerMlkit ()
-@property(nonatomic, strong) FIRVisionBarcodeDetector *barcodeRecognizer;
-@property(nonatomic, strong) FIRVision *vision;
-@property(nonatomic, assign) FIRVisionBarcodeFormat setOption;
+@property(nonatomic, strong) MLKBarcodeScanner *barcodeRecognizer;
+@property(nonatomic, assign) MLKBarcodeFormat setOption;
+
 @property(nonatomic, assign) NSInteger detectionMode;
 @property(nonatomic, assign) float scaleX;
 @property(nonatomic, assign) float scaleY;
@@ -17,8 +17,8 @@ @implementation BarcodeDetectorManagerMlkit
 - (instancetype)init
 {
   if (self = [super init]) {
-    self.vision = [FIRVision vision];
-    self.barcodeRecognizer = [_vision barcodeDetector];
+    self.barcodeRecognizer = [MLKBarcodeScanner barcodeScanner];
+
   }
   return self;
 }
@@ -36,20 +36,20 @@ -(NSInteger)fetchDetectionMode
 + (NSDictionary *)constants
 {
     return @{
-                @"CODE_128" : @(FIRVisionBarcodeFormatCode128),
-                @"CODE_39" : @(FIRVisionBarcodeFormatCode39),
-                @"CODE_93" : @(FIRVisionBarcodeFormatCode93),
-                @"CODABAR" : @(FIRVisionBarcodeFormatCodaBar),
-                @"EAN_13" : @(FIRVisionBarcodeFormatEAN13),
-                @"EAN_8" : @(FIRVisionBarcodeFormatEAN8),
-                @"ITF" : @(FIRVisionBarcodeFormatITF),
-                @"UPC_A" : @(FIRVisionBarcodeFormatUPCA),
-                @"UPC_E" : @(FIRVisionBarcodeFormatUPCE),
-                @"QR_CODE" : @(FIRVisionBarcodeFormatQRCode),
-                @"PDF417" : @(FIRVisionBarcodeFormatPDF417),
-                @"AZTEC" : @(FIRVisionBarcodeFormatAztec),
-                @"DATA_MATRIX" : @(FIRVisionBarcodeFormatDataMatrix),
-                @"ALL" : @(FIRVisionBarcodeFormatAll),
+                @"CODE_128" : @(MLKBarcodeFormatCode128),
+                @"CODE_39" : @(MLKBarcodeFormatCode39),
+                @"CODE_93" : @(MLKBarcodeFormatCode93),
+                @"CODABAR" : @(MLKBarcodeFormatCodaBar),
+                @"EAN_13" : @(MLKBarcodeFormatEAN13),
+                @"EAN_8" : @(MLKBarcodeFormatEAN8),
+                @"ITF" : @(MLKBarcodeFormatITF),
+                @"UPC_A" : @(MLKBarcodeFormatUPCA),
+                @"UPC_E" : @(MLKBarcodeFormatUPCE),
+                @"QR_CODE" : @(MLKBarcodeFormatQRCode),
+                @"PDF417" : @(MLKBarcodeFormatPDF417),
+                @"AZTEC" : @(MLKBarcodeFormatAztec),
+                @"DATA_MATRIX" : @(MLKBarcodeFormatDataMatrix),
+                @"ALL" : @(MLKBarcodeFormatAll),
             };
 }
 
@@ -60,11 +60,11 @@ - (void)setType:(id)json queue:(dispatch_queue_t)sessionQueue
       if (sessionQueue) {
           dispatch_async(sessionQueue, ^{
               self.setOption = requestedValue;
-              FIRVisionBarcodeDetectorOptions *options =
-              [[FIRVisionBarcodeDetectorOptions alloc]
+              MLKBarcodeScannerOptions *options =
+              [[MLKBarcodeScannerOptions alloc]
               initWithFormats: requestedValue];
               self.barcodeRecognizer =
-              [self.vision barcodeDetectorWithOptions:options];
+              [MLKBarcodeScanner barcodeScannerWithOptions:options];
           });
       }
   }
@@ -83,10 +83,11 @@ - (void)findBarcodesInFrame:(UIImage *)uiImage
 {
     self.scaleX = scaleX;
     self.scaleY = scaleY;
-    FIRVisionImage *image = [[FIRVisionImage alloc] initWithImage:uiImage];
+    MLKVisionImage *image = [[MLKVisionImage alloc] initWithImage:uiImage];
+    image.orientation = uiImage.imageOrientation;
     NSMutableArray *emptyResult = [[NSMutableArray alloc] init];
-    [_barcodeRecognizer detectInImage:image
-        completion:^(NSArray<FIRVisionBarcode *> *barcodes, NSError *error) {
+    [_barcodeRecognizer processImage:image
+        completion:^(NSArray<MLKBarcode *> *barcodes, NSError *error) {
             if (error != nil || barcodes == nil) {
                 completed(emptyResult);
             } else {
@@ -98,7 +99,7 @@ - (void)findBarcodesInFrame:(UIImage *)uiImage
 - (NSArray *)processBarcodes:(NSArray *)barcodes imageContainingBarcodes:(UIImage *)imageContainingBarcodes
 {
     NSMutableArray *result = [[NSMutableArray alloc] init];
-    for (FIRVisionBarcode *barcode in barcodes) {
+    for (MLKBarcode *barcode in barcodes) {
         NSMutableDictionary *resultDict =
         [[NSMutableDictionary alloc] initWithCapacity:20];
         // Boundaries of a barcode in image
@@ -118,24 +119,24 @@ - (NSArray *)processBarcodes:(NSArray *)barcodes imageContainingBarcodes:(UIImag
         [UIImageJPEGRepresentation(imageContainingBarcodes, 1.0) writeToFile:path atomically:YES];
         [resultDict setObject:path forKey:@"uri"];
 
-        FIRVisionBarcodeValueType valueType = barcode.valueType;
+        MLKBarcodeValueType valueType = barcode.valueType;
         [resultDict setObject:[self getType:barcode.valueType] forKey:@"type"];
 
         switch (valueType) {
-            case FIRVisionBarcodeValueTypeWiFi:
+            case MLKBarcodeValueTypeWiFi:
                 if(barcode.wifi.ssid) {[resultDict setObject:barcode.wifi.ssid forKey:@"ssid"]; }
                 if(barcode.wifi.password) {[resultDict setObject:barcode.wifi.password forKey:@"password"]; }
                 if(barcode.wifi.type) {
                     NSString *encryptionTypeString = @"UNKNOWN";
                     int type = barcode.wifi.type;
                     switch (type) {
-                        case FIRVisionBarcodeWiFiEncryptionTypeWEP:
+                        case MLKBarcodeWiFiEncryptionTypeWEP:
                             encryptionTypeString = @"WEP";
                             break;
-                        case FIRVisionBarcodeWiFiEncryptionTypeWPA:
+                        case MLKBarcodeWiFiEncryptionTypeWPA:
                             encryptionTypeString = @"WPA";
                             break;
-                        case FIRVisionBarcodeWiFiEncryptionTypeOpen:
+                        case MLKBarcodeWiFiEncryptionTypeOpen:
                             encryptionTypeString = @"Open";
                             break;
                         default:
@@ -144,41 +145,41 @@ - (NSArray *)processBarcodes:(NSArray *)barcodes imageContainingBarcodes:(UIImag
                     [resultDict setObject:encryptionTypeString forKey:@"encryptionType"];
                 }
                 break;
-            case FIRVisionBarcodeValueTypeURL:
+            case MLKBarcodeValueTypeURL:
                 if(barcode.URL.url) { [resultDict setObject:barcode.URL.url forKey:@"url"]; }
                 if(barcode.URL.title) { [resultDict setObject:barcode.URL.title forKey:@"title"]; }
                 break;
-            case FIRVisionBarcodeValueTypeContactInfo:
+            case MLKBarcodeValueTypeContactInfo:
                 if(barcode.contactInfo.addresses) {
                     NSMutableArray *addresses = [[NSMutableArray alloc] init];
-                    for (FIRVisionBarcodeAddress *address in barcode.contactInfo.addresses) {
+                    for (MLKBarcodeAddress *address in barcode.contactInfo.addresses) {
                         [addresses addObject:[self processAddress:address]];
                     }
                     [resultDict setObject:addresses forKey:@"addresses"];
                 }
                 if(barcode.contactInfo.emails) {
                     NSMutableArray *emails = [[NSMutableArray alloc] init];
-                    for (FIRVisionBarcodeEmail *email in barcode.contactInfo.emails) {
+                    for (MLKBarcodeEmail *email in barcode.contactInfo.emails) {
                         [emails addObject:[self processEmail:email]];
                     }
                     [resultDict setObject:emails forKey:@"emails"];
                 }
                 if(barcode.contactInfo.name) {
-                    FIRVisionBarcodePersonName *name = barcode.contactInfo.name;
+                    MLKBarcodePersonName *name = barcode.contactInfo.name;
                     NSObject *nameObject = @{
                                              @"formattedName" : name.formattedName ? name.formattedName : @"",
                                              @"firstName" : name.first ? name.first : @"",
                                              @"middleName" : name.middle ? name.middle : @"",
                                              @"lastName" : name.last ? name.last : @"",
                                              @"prefix" : name.prefix ? name.prefix : @"",
-                                             @"pronounciation" : name.pronounciation ? name.pronounciation : @"",
+                                             @"pronunciation" : name.pronunciation ? name.pronunciation : @"",
                                              @"suffix" : name.suffix ? name.suffix : @"",
                                              };
                     [resultDict setObject:nameObject forKey:@"name"];
                 }
                 if(barcode.contactInfo.phones) {
                     NSMutableArray *phones = [[NSMutableArray alloc] init];
-                    for (FIRVisionBarcodePhone *phone in barcode.contactInfo.phones) {
+                    for (MLKBarcodePhone *phone in barcode.contactInfo.phones) {
                         [phones addObject:[self processPhone:phone]];
                     }
                     [resultDict setObject:phones forKey:@"phones"];
@@ -186,15 +187,15 @@ - (NSArray *)processBarcodes:(NSArray *)barcodes imageContainingBarcodes:(UIImag
                 if(barcode.contactInfo.urls) {[resultDict setObject:barcode.contactInfo.urls forKey:@"urls"]; }
                 if(barcode.contactInfo.organization) {[resultDict setObject:barcode.contactInfo.organization forKey:@"organization"]; }
                 break;
-            case FIRVisionBarcodeValueTypeSMS:
+            case MLKBarcodeValueTypeSMS:
                 if(barcode.sms.message) {[resultDict setObject:barcode.sms.message forKey:@"message"]; }
                 if(barcode.sms.phoneNumber) {[resultDict setObject:barcode.sms.phoneNumber forKey:@"phoneNumber"]; }
                 break;
-            case FIRVisionBarcodeValueTypeGeographicCoordinates:
+            case MLKBarcodeValueTypeGeographicCoordinates:
                 if(barcode.geoPoint.latitude) {[resultDict setObject:@(barcode.geoPoint.latitude) forKey:@"latitude"]; }
                 if(barcode.geoPoint.longitude) {[resultDict setObject:@(barcode.geoPoint.longitude) forKey:@"longitude"]; }
                 break;
-            case FIRVisionBarcodeValueTypeDriversLicense:
+            case MLKBarcodeValueTypeDriversLicense:
                 if(barcode.driverLicense.firstName) {[resultDict setObject:barcode.driverLicense.firstName forKey:@"firstName"]; }
                 if(barcode.driverLicense.middleName) {[resultDict setObject:barcode.driverLicense.middleName forKey:@"middleName"]; }
                 if(barcode.driverLicense.lastName) {[resultDict setObject:barcode.driverLicense.lastName forKey:@"lastName"]; }
@@ -210,7 +211,7 @@ - (NSArray *)processBarcodes:(NSArray *)barcodes imageContainingBarcodes:(UIImag
                 if(barcode.driverLicense.issuingDate) {[resultDict setObject:barcode.driverLicense.issuingDate forKey:@"issuingDate"]; }
                 if(barcode.driverLicense.issuingCountry) {[resultDict setObject:barcode.driverLicense.issuingCountry forKey:@"issuingCountry"]; }
                 break;
-            case FIRVisionBarcodeValueTypeCalendarEvent:
+            case MLKBarcodeValueTypeCalendarEvent:
                 if(barcode.calendarEvent.eventDescription) {[resultDict setObject:barcode.calendarEvent.eventDescription forKey:@"eventDescription"]; }
                 if(barcode.calendarEvent.location) {[resultDict setObject:barcode.calendarEvent.location forKey:@"location"]; }
                 if(barcode.calendarEvent.organizer) {[resultDict setObject:barcode.calendarEvent.organizer forKey:@"organizer"]; }
@@ -223,13 +224,13 @@ - (NSArray *)processBarcodes:(NSArray *)barcodes imageContainingBarcodes:(UIImag
                     [resultDict setObject:[self processDate:barcode.calendarEvent.end] forKey:@"end"];
                 }
                 break;
-            case FIRVisionBarcodeValueTypePhone:
+            case MLKBarcodeValueTypePhone:
                 if(barcode.phone.number) {[resultDict setObject:barcode.phone.number forKey:@"number"]; }
                 if(barcode.phone.type) {
                     [resultDict setObject:[self getPhoneType:barcode.phone.type] forKey:@"phoneType"];
                 }
                 break;
-            case FIRVisionBarcodeValueTypeEmail:
+            case MLKBarcodeValueTypeEmail:
                 if(barcode.email.address) {[resultDict setObject:barcode.email.address forKey:@"address"]; }
                 if(barcode.email.body) {[resultDict setObject:barcode.email.body forKey:@"body"]; }
                 if(barcode.email.subject) {[resultDict setObject:barcode.email.subject forKey:@"subject"]; }
@@ -247,37 +248,37 @@ - (NSString *)getType:(int)type
 {
     NSString *barcodeType = @"UNKNOWN";
     switch (type) {
-        case FIRVisionBarcodeValueTypeEmail:
+        case MLKBarcodeValueTypeEmail:
             barcodeType = @"EMAIL";
             break;
-        case FIRVisionBarcodeValueTypePhone:
+        case MLKBarcodeValueTypePhone:
             barcodeType = @"PHONE";
             break;
-        case FIRVisionBarcodeValueTypeCalendarEvent:
+        case MLKBarcodeValueTypeCalendarEvent:
             barcodeType = @"CALENDAR_EVENT";
             break;
-        case FIRVisionBarcodeValueTypeDriversLicense:
+        case MLKBarcodeValueTypeDriversLicense:
             barcodeType = @"DRIVER_LICENSE";
             break;
-        case FIRVisionBarcodeValueTypeGeographicCoordinates:
+        case MLKBarcodeValueTypeGeographicCoordinates:
             barcodeType = @"GEO";
             break;
-        case FIRVisionBarcodeValueTypeSMS:
+        case MLKBarcodeValueTypeSMS:
             barcodeType = @"SMS";
             break;
-        case FIRVisionBarcodeValueTypeContactInfo:
+        case MLKBarcodeValueTypeContactInfo:
             barcodeType = @"CONTACT_INFO";
             break;
-        case FIRVisionBarcodeValueTypeWiFi:
+        case MLKBarcodeValueTypeWiFi:
             barcodeType = @"WIFI";
             break;
-        case FIRVisionBarcodeValueTypeText:
+        case MLKBarcodeValueTypeText:
             barcodeType = @"TEXT";
             break;
-        case FIRVisionBarcodeValueTypeISBN:
+        case MLKBarcodeValueTypeISBN:
             barcodeType = @"ISBN";
             break;
-        case FIRVisionBarcodeValueTypeProduct:
+        case MLKBarcodeValueTypeProduct:
             barcodeType = @"PRODUCT";
             break;
         default:
@@ -290,14 +291,14 @@ - (NSString *)getPhoneType:(int)type
 {
     NSString *typeString = @"UNKNOWN";
     switch (type) {
-        case FIRVisionBarcodePhoneTypeFax:
+        case MLKBarcodePhoneTypeFax:
             typeString = @"Fax";
             break;
-        case FIRVisionBarcodePhoneTypeHome:
+        case MLKBarcodePhoneTypeHome:
             typeString = @"Home";
-        case FIRVisionBarcodePhoneTypeWork:
+        case MLKBarcodePhoneTypeWork:
             typeString = @"Work";
-        case FIRVisionBarcodePhoneTypeMobile:
+        case MLKBarcodePhoneTypeMobile:
             typeString = @"Mobile";
         default:
             break;
@@ -309,10 +310,10 @@ - (NSString *)getEmailType:(int)type
 {
     NSString *typeString = @"UNKNOWN";
     switch (type) {
-        case FIRVisionBarcodeEmailTypeWork:
+        case MLKBarcodeEmailTypeWork:
             typeString = @"Work";
             break;
-        case FIRVisionBarcodeEmailTypeHome:
+        case MLKBarcodeEmailTypeHome:
             typeString = @"Home";
         default:
             break;
@@ -320,7 +321,7 @@ - (NSString *)getEmailType:(int)type
     return typeString;
 }
 
-- (NSDictionary *)processPhone:(FIRVisionBarcodePhone *)phone
+- (NSDictionary *)processPhone:(MLKBarcodePhone *)phone
 {
     NSString *number = @"";
     NSString *typeString = @"UNKNOWN";
@@ -331,7 +332,7 @@ - (NSDictionary *)processPhone:(FIRVisionBarcodePhone *)phone
     return @{@"number" : number, @"phoneType" : typeString};
 }
 
-- (NSDictionary *)processAddress:(FIRVisionBarcodeAddress *)address
+- (NSDictionary *)processAddress:(MLKBarcodeAddress *)address
 {
     NSArray *addressLines = [[NSArray alloc] init];
     NSString *typeString = @"UNKNOWN";
@@ -339,10 +340,10 @@ - (NSDictionary *)processAddress:(FIRVisionBarcodeAddress *)address
         int type = address.type;
         NSString *typeString = @"UNKNOWN";
         switch (type) {
-            case FIRVisionBarcodeAddressTypeWork:
+            case MLKBarcodeAddressTypeWork:
                 typeString = @"Work";
                 break;
-            case FIRVisionBarcodeAddressTypeHome:
+            case MLKBarcodeAddressTypeHome:
                 typeString = @"Home";
             default:
                 break;
@@ -352,7 +353,7 @@ - (NSDictionary *)processAddress:(FIRVisionBarcodeAddress *)address
     return @{@"addressLines" : addressLines, @"addressType" : typeString};
 }
 
-- (NSDictionary *)processEmail:(FIRVisionBarcodeEmail *)email
+- (NSDictionary *)processEmail:(MLKBarcodeEmail *)email
 {
     NSString *subject = @"";
     NSString *address  =@"";
@@ -388,10 +389,10 @@ - (NSDictionary *)processBounds:(CGRect)bounds
 }
 
 
-- (NSDictionary *)processPoint:(FIRVisionPoint *)point
+- (NSDictionary *)processPoint:(MLKVisionPoint *)point
 {
-    float originX = [point.x floatValue] * _scaleX;
-    float originY = [point.y floatValue] * _scaleY;
+    float originX = point.x * _scaleX;
+    float originY = point.y * _scaleY;
     NSDictionary *pointDict = @{
                                 @"x" : @(originX),
                                 @"y" : @(originY)
diff --git a/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.h b/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.h
index 710364d..317311e 100644
--- a/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.h
+++ b/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.h
@@ -1,20 +1,22 @@
 
 #import <UIKit/UIKit.h>
-#if __has_include(<FirebaseMLVision/FirebaseMLVision.h>)
-  #import <FirebaseMLVision/FirebaseMLVision.h>
+#if __has_include(<MLKitFaceDetection/MLKitFaceDetection.h>)
+  #import <MLKitVision/MLKitVision.h>
+  #import <MLKitFaceDetection/MLKitFaceDetection.h>
+
   typedef NS_ENUM(NSInteger, RNFaceDetectionMode) {
-      RNFaceDetectionFastMode = FIRVisionFaceDetectorPerformanceModeFast,
-      RNFaceDetectionAccurateMode = FIRVisionFaceDetectorPerformanceModeAccurate
+      RNFaceDetectionFastMode = MLKFaceDetectorPerformanceModeFast,
+      RNFaceDetectionAccurateMode = MLKFaceDetectorPerformanceModeAccurate
   };
 
   typedef NS_ENUM(NSInteger, RNFaceDetectionLandmarks) {
-      RNFaceDetectAllLandmarks = FIRVisionFaceDetectorLandmarkModeAll,
-      RNFaceDetectNoLandmarks = FIRVisionFaceDetectorLandmarkModeNone
+      RNFaceDetectAllLandmarks = MLKFaceDetectorLandmarkModeAll,
+      RNFaceDetectNoLandmarks = MLKFaceDetectorLandmarkModeNone
   };
 
   typedef NS_ENUM(NSInteger, RNFaceDetectionClassifications) {
-      RNFaceRunAllClassifications = FIRVisionFaceDetectorClassificationModeAll,
-      RNFaceRunNoClassifications = FIRVisionFaceDetectorClassificationModeNone
+      RNFaceRunAllClassifications = MLKFaceDetectorClassificationModeAll,
+      RNFaceRunNoClassifications = MLKFaceDetectorClassificationModeNone
   };
 #endif
 
diff --git a/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.m b/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.m
index 0c66763..fc9b874 100644
--- a/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.m
+++ b/node_modules/react-native-camera/ios/RN/FaceDetectorManagerMlkit.m
@@ -1,11 +1,11 @@
 #import "FaceDetectorManagerMlkit.h"
 #import <React/RCTConvert.h>
-#if __has_include(<FirebaseMLVision/FirebaseMLVision.h>)
+#if __has_include(<MLKitFaceDetection/MLKitFaceDetection.h>)
 
 @interface FaceDetectorManagerMlkit ()
-@property(nonatomic, strong) FIRVisionFaceDetector *faceRecognizer;
-@property(nonatomic, strong) FIRVision *vision;
-@property(nonatomic, strong) FIRVisionFaceDetectorOptions *options;
+@property(nonatomic, strong) MLKFaceDetector *faceRecognizer;
+@property(nonatomic, strong) MLKFaceDetectorOptions *options;
+
 @property(nonatomic, assign) float scaleX;
 @property(nonatomic, assign) float scaleY;
 @end
@@ -15,13 +15,12 @@ @implementation FaceDetectorManagerMlkit
 - (instancetype)init 
 {
   if (self = [super init]) {
-    self.options = [[FIRVisionFaceDetectorOptions alloc] init];
-    self.options.performanceMode = FIRVisionFaceDetectorPerformanceModeFast;
-    self.options.landmarkMode = FIRVisionFaceDetectorLandmarkModeNone;
-    self.options.classificationMode = FIRVisionFaceDetectorClassificationModeNone;
+    self.options = [[MLKFaceDetectorOptions alloc] init];
+    self.options.performanceMode = MLKFaceDetectorPerformanceModeFast;
+    self.options.landmarkMode = MLKFaceDetectorLandmarkModeNone;
+    self.options.classificationMode = MLKFaceDetectorClassificationModeNone;
 
-    self.vision = [FIRVision vision];
-    self.faceRecognizer = [_vision faceDetectorWithOptions:_options];
+    self.faceRecognizer = [MLKFaceDetector faceDetectorWithOptions:_options];
   }
   return self;
 }
@@ -57,7 +56,7 @@ - (void)setTracking:(id)json queue:(dispatch_queue_t)sessionQueue
           dispatch_async(sessionQueue, ^{
               self.options.trackingEnabled = requestedValue;
               self.faceRecognizer =
-              [self.vision faceDetectorWithOptions:self.options];
+              [MLKFaceDetector faceDetectorWithOptions:self.options];
           });
       }
   }
@@ -71,7 +70,7 @@ - (void)setLandmarksMode:(id)json queue:(dispatch_queue_t)sessionQueue
             dispatch_async(sessionQueue, ^{
                 self.options.landmarkMode = requestedValue;
                 self.faceRecognizer =
-                [self.vision faceDetectorWithOptions:self.options];
+                [MLKFaceDetector faceDetectorWithOptions:self.options];
             });
         }
     }
@@ -85,7 +84,7 @@ - (void)setPerformanceMode:(id)json queue:(dispatch_queue_t)sessionQueue
             dispatch_async(sessionQueue, ^{
                 self.options.performanceMode = requestedValue;
                 self.faceRecognizer =
-                [self.vision faceDetectorWithOptions:self.options];
+                [MLKFaceDetector faceDetectorWithOptions:self.options];
             });
         }
     }
@@ -99,7 +98,7 @@ - (void)setClassificationMode:(id)json queue:(dispatch_queue_t)sessionQueue
             dispatch_async(sessionQueue, ^{
                 self.options.classificationMode = requestedValue;
                 self.faceRecognizer =
-                [self.vision faceDetectorWithOptions:self.options];
+                [MLKFaceDetector faceDetectorWithOptions:self.options];
             });
         }
     }
@@ -112,11 +111,11 @@ - (void)findFacesInFrame:(UIImage *)uiImage
 {
     self.scaleX = scaleX;
     self.scaleY = scaleY;
-    FIRVisionImage *image = [[FIRVisionImage alloc] initWithImage:uiImage];
+    MLKVisionImage *image = [[MLKVisionImage alloc] initWithImage:uiImage];
     NSMutableArray *emptyResult = [[NSMutableArray alloc] init];
     [_faceRecognizer
      processImage:image
-     completion:^(NSArray<FIRVisionFace *> *faces, NSError *error) {
+     completion:^(NSArray<MLKFace *> *faces, NSError *error) {
          if (error != nil || faces == nil) {
              completed(emptyResult);
          } else {
@@ -128,7 +127,7 @@ - (void)findFacesInFrame:(UIImage *)uiImage
 - (NSArray *)processFaces:(NSArray *)faces 
 {
     NSMutableArray *result = [[NSMutableArray alloc] init];
-    for (FIRVisionFace *face in faces) {
+    for (MLKFace *face in faces) {
         NSMutableDictionary *resultDict =
         [[NSMutableDictionary alloc] initWithCapacity:20];
         // Boundaries of face in image
@@ -153,71 +152,71 @@ - (NSArray *)processFaces:(NSArray *)faces
         // If landmark detection was enabled (mouth, ears, eyes, cheeks, and
         // nose available):
         /** Midpoint of the left ear tip and left ear lobe. */
-        FIRVisionFaceLandmark *leftEar =
-        [face landmarkOfType:FIRFaceLandmarkTypeLeftEar];
+        MLKFaceLandmark *leftEar =
+        [face landmarkOfType:MLKFaceLandmarkTypeLeftEar];
         if (leftEar != nil) {
             [resultDict setObject:[self processPoint:leftEar.position]
                            forKey:@"leftEarPosition"];
         }
         /** Midpoint of the right ear tip and right ear lobe. */
-        FIRVisionFaceLandmark *rightEar =
-        [face landmarkOfType:FIRFaceLandmarkTypeRightEar];
+        MLKFaceLandmark *rightEar =
+        [face landmarkOfType:MLKFaceLandmarkTypeRightEar];
         if (rightEar != nil) {
             [resultDict setObject:[self processPoint:rightEar.position]
                            forKey:@"rightEarPosition"];
         }
         /** Center of the bottom lip. */
-        FIRVisionFaceLandmark *mouthBottom =
-        [face landmarkOfType:FIRFaceLandmarkTypeMouthBottom];
+        MLKFaceLandmark *mouthBottom =
+        [face landmarkOfType:MLKFaceLandmarkTypeMouthBottom];
         if (mouthBottom != nil) {
             [resultDict setObject:[self processPoint:mouthBottom.position]
                            forKey:@"bottomMouthPosition"];
         }
         /** Right corner of the mouth */
-        FIRVisionFaceLandmark *mouthRight =
-        [face landmarkOfType:FIRFaceLandmarkTypeMouthRight];
+        MLKFaceLandmark *mouthRight =
+        [face landmarkOfType:MLKFaceLandmarkTypeMouthRight];
         if (mouthRight != nil) {
             [resultDict setObject:[self processPoint:mouthRight.position]
                            forKey:@"rightMouthPosition"];
         }
         /** Left corner of the mouth */
-        FIRVisionFaceLandmark *mouthLeft =
-        [face landmarkOfType:FIRFaceLandmarkTypeMouthLeft];
+        MLKFaceLandmark *mouthLeft =
+        [face landmarkOfType:MLKFaceLandmarkTypeMouthLeft];
         if (mouthLeft != nil) {
             [resultDict setObject:[self processPoint:mouthLeft.position]
                            forKey:@"leftMouthPosition"];
         }
         /** Left eye. */
-        FIRVisionFaceLandmark *eyeLeft =
-        [face landmarkOfType:FIRFaceLandmarkTypeLeftEye];
+        MLKFaceLandmark *eyeLeft =
+        [face landmarkOfType:MLKFaceLandmarkTypeLeftEye];
         if (eyeLeft != nil) {
             [resultDict setObject:[self processPoint:eyeLeft.position]
                            forKey:@"leftEyePosition"];
         }
         /** Right eye. */
-        FIRVisionFaceLandmark *eyeRight =
-        [face landmarkOfType:FIRFaceLandmarkTypeRightEye];
+        MLKFaceLandmark *eyeRight =
+        [face landmarkOfType:MLKFaceLandmarkTypeRightEye];
         if (eyeRight != nil) {
             [resultDict setObject:[self processPoint:eyeRight.position]
                            forKey:@"rightEyePosition"];
         }
         /** Left cheek. */
-        FIRVisionFaceLandmark *cheekLeft =
-        [face landmarkOfType:FIRFaceLandmarkTypeLeftCheek];
+        MLKFaceLandmark *cheekLeft =
+        [face landmarkOfType:MLKFaceLandmarkTypeLeftCheek];
         if (cheekLeft != nil) {
             [resultDict setObject:[self processPoint:cheekLeft.position]
                            forKey:@"leftCheekPosition"];
         }
         /** Right cheek. */
-        FIRVisionFaceLandmark *cheekRight =
-        [face landmarkOfType:FIRFaceLandmarkTypeRightCheek];
+        MLKFaceLandmark *cheekRight =
+        [face landmarkOfType:MLKFaceLandmarkTypeRightCheek];
         if (cheekRight != nil) {
             [resultDict setObject:[self processPoint:cheekRight.position]
                            forKey:@"rightCheekPosition"];
         }
         /** Midpoint between the nostrils where the nose meets the face. */
-        FIRVisionFaceLandmark *noseBase =
-        [face landmarkOfType:FIRFaceLandmarkTypeNoseBase];
+        MLKFaceLandmark *noseBase =
+        [face landmarkOfType:MLKFaceLandmarkTypeNoseBase];
         if (noseBase != nil) {
             [resultDict setObject:[self processPoint:noseBase.position]
                            forKey:@"noseBasePosition"];
@@ -256,10 +255,10 @@ - (NSDictionary *)processBounds:(CGRect)bounds
     return boundsDict;
 }
 
-- (NSDictionary *)processPoint:(FIRVisionPoint *)point 
+- (NSDictionary *)processPoint:(MLKVisionPoint *)point 
 {
-    float originX = [point.x floatValue] * _scaleX;
-    float originY = [point.y floatValue] * _scaleY;
+    float originX = point.x * _scaleX;
+    float originY = point.y * _scaleY;
     NSDictionary *pointDict = @{
                                 
                                 @"x" : @(originX),
diff --git a/node_modules/react-native-camera/ios/RN/RNCameraManager.m b/node_modules/react-native-camera/ios/RN/RNCameraManager.m
index 6a51928..1d8965a 100644
--- a/node_modules/react-native-camera/ios/RN/RNCameraManager.m
+++ b/node_modules/react-native-camera/ios/RN/RNCameraManager.m
@@ -165,7 +165,7 @@ + (NSDictionary *)pictureSizes
 
 + (NSDictionary *)faceDetectorConstants
 {
-#if __has_include(<FirebaseMLVision/FirebaseMLVision.h>)
+#if __has_include(<MLKitFaceDetection/MLKitFaceDetection.h>)
     return [FaceDetectorManagerMlkit constants];
 #else
     return [NSDictionary new];
@@ -174,7 +174,7 @@ + (NSDictionary *)faceDetectorConstants
 
 + (NSDictionary *)barcodeDetectorConstants
 {
-#if __has_include(<FirebaseMLVision/FirebaseMLVision.h>)
+#if __has_include(<MLKitBarcodeScanning/MLKitBarcodeScanning.h>)
     return [BarcodeDetectorManagerMlkit constants];
 #else
     return [NSDictionary new];
diff --git a/node_modules/react-native-camera/ios/RN/RNFaceDetectorModuleMLKit.m b/node_modules/react-native-camera/ios/RN/RNFaceDetectorModuleMLKit.m
index d2bacb7..c8a1c29 100644
--- a/node_modules/react-native-camera/ios/RN/RNFaceDetectorModuleMLKit.m
+++ b/node_modules/react-native-camera/ios/RN/RNFaceDetectorModuleMLKit.m
@@ -1,5 +1,5 @@
 #import "RNFaceDetectorModuleMLKit.h"
-#if __has_include(<FirebaseMLVision/FirebaseMLVision.h>)
+#if __has_include(<MLKitFaceDetection/MLKitFaceDetection.h>)
 #import "RNFileSystem.h"
 #import "RNImageUtils.h"
 
@@ -58,7 +58,7 @@ - (NSDictionary *)constantsToExport
             reject(@"E_FACE_DETECTION_FAILED", [NSString stringWithFormat:@"The file does not exist. Given path: `%@`.", path], nil);
             return;
         }
-        FIRVisionFaceDetectorOptions *newOptions = [[FIRVisionFaceDetectorOptions alloc] init];
+        MLKFaceDetectorOptions *newOptions = [[MLKFaceDetectorOptions alloc] init];
         if (options[kDetectLandmarksOptionName]) {
             newOptions.landmarkMode = [options[kDetectLandmarksOptionName] integerValue];
         }
diff --git a/node_modules/react-native-camera/ios/RNCamera.xcodeproj/xcuserdata/mrinalmaheshwari.xcuserdatad/xcschemes/xcschememanagement.plist b/node_modules/react-native-camera/ios/RNCamera.xcodeproj/xcuserdata/mrinalmaheshwari.xcuserdatad/xcschemes/xcschememanagement.plist
new file mode 100644
index 0000000..32c6bb7
--- /dev/null
+++ b/node_modules/react-native-camera/ios/RNCamera.xcodeproj/xcuserdata/mrinalmaheshwari.xcuserdatad/xcschemes/xcschememanagement.plist
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>SchemeUserState</key>
+	<dict>
+		<key>RNCamera.xcscheme_^#shared#^_</key>
+		<dict>
+			<key>orderHint</key>
+			<integer>132</integer>
+		</dict>
+	</dict>
+</dict>
+</plist>
diff --git a/node_modules/react-native-camera/react-native-camera.podspec b/node_modules/react-native-camera/react-native-camera.podspec
index a67d1fd..3c5215b 100644
--- a/node_modules/react-native-camera/react-native-camera.podspec
+++ b/node_modules/react-native-camera/react-native-camera.podspec
@@ -26,22 +26,19 @@ Pod::Spec.new do |s|
   s.subspec "TextDetector" do |ss|
     ss.dependency 'react-native-camera/RN'
     ss.dependency 'react-native-camera/RCT'
-    ss.dependency 'Firebase/MLVision'
-    ss.dependency 'Firebase/MLVisionTextModel'
+    ss.dependency 'GoogleMLKit/TextRecognition'
   end
 
   s.subspec "FaceDetectorMLKit" do |ss|
     ss.dependency 'react-native-camera/RN'
     ss.dependency 'react-native-camera/RCT'
-    ss.dependency 'Firebase/MLVision'
-    ss.dependency 'Firebase/MLVisionFaceModel'
+    ss.dependency 'GoogleMLKit/FaceDetection'
   end
   
   s.subspec "BarcodeDetectorMLKit" do |ss|
     ss.dependency 'react-native-camera/RN'
     ss.dependency 'react-native-camera/RCT'
-    ss.dependency 'Firebase/MLVision'
-    ss.dependency 'Firebase/MLVisionBarcodeModel'
+    ss.dependency 'GoogleMLKit/BarcodeScanning'
   end
 
   s.default_subspecs = "RN", "RCT"
